<?php

namespace App;

use Image;
use Imagick;
use Str;
use App\User;
use Jenssegers\Mongodb\Eloquent\Model;
use Illuminate\Http\UploadedFile;

/**
 *
 * @property string $id
 * @property string $path
 * @property string $type
 * @property bool   $is_autogenerated
 * @property Carbon $created_at
 * @property Carbon $updated_at
 */
class File extends Model
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'path',
        'type',
        'is_autogenerated',
    ];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = ['path'];

    public function user()
    {
        return $this->belongsTo('App\User');
    }

    public function video()
    {
        return $this->belongsTo('App\Video', 'video_id');
    }

    public function isVideo()
    {
        return !is_null($this->video_id);
    }

    public static function makeAvatar(UploadedFile $file, $quality = 90)
    {
        $extension = $file->guessExtension();

        if ($extension === 'png') {
            $encoding = 'png';
        } else {
            $encoding = 'jpg';
        }

        $picture = Image::make($file);

        $picture->resize(1000, null, function ($constraint) {
            $constraint->aspectRatio();
        });

        if ($extension === 'png') {
            // Use transparent background
            $picture->resizeCanvas(null, 1000, 'center', false);
        } else {
            $picture->resizeCanvas(null, 1000, 'center', false, '#ffffff');
        }

        $picture->encode($encoding, $quality);

        return $picture;
    }

    public static function makeFlyer(UploadedFile $file, $quality = 90)
    {
        $extension = $file->guessExtension();

        if ($extension === 'gif') {
            $encoding = 'gif';
        } else if ($extension === 'png') {
            $encoding = 'png';
        } elseif ($extension === 'jpg' || $extension === 'jpeg') {
            $encoding = 'jpg';
        } else {
            throw new \Exception($extension.' format is not supported yet.', 422);
        }

        if ($encoding === 'gif') {
            $im = new Imagick($file->path());
            $im = $im->coalesceImages();

            do {
                $im->resizeImage(0, 750, Imagick::FILTER_LANCZOS, 1);
                $w = $im->getImageWidth();
                $wOffset = ($w - 500) / 2;
                $im->cropImage(500, 750, $wOffset, 0);
                $im->setImageExtent(500, 750);
                $im->thumbnailImage(500, 750);
            } while ($im->nextImage());

            $im = $im->deconstructImages();

            $tmpPath = '/tmp/' . time() . '_' . Str::random(64);
            $im->writeImages($tmpPath, true);

            $picture = file_get_contents($tmpPath);
            unlink($tmpPath);
        } else {
            $picture = Image::make($file);

            $picture->fit(1000, 1500, function ($constraint) {
                $constraint->aspectRatio();
            });

            $picture->resizeCanvas(1000, 1500, 'center', false, '#ffffff');

            $picture->encode($encoding, $quality);
        }

        return $picture;
    }

    public static function makeFlyerFromUrl($url, $quality = 90)
    {
        $picture = Image::make($url);

        $mime = $picture->mime();

        if ($mime == 'image/png') {
            $encoding = 'png';
        } else if ($mime == 'image/jpeg') {
            $encoding = 'jpg';
        } else {
            throw new \Exception($mime.' format is not supported yet.', 422);
        }

        $picture->fit(1000, 1500, function ($constraint) {
            $constraint->aspectRatio();
        });

        $picture->resizeCanvas(1000, 1500, 'center', false, '#ffffff');

        $picture->encode($encoding, $quality);

        return $picture;
    }

    public static function makeFlyerFromText($text, $quality = 90)
    {
        $picture = Image::canvas(1000, 1500, '#eeeeee');

        $text = Str::limit($text, 55);

        if (mb_strlen($text) > 55) {
            $fontSize = 18 * 2;
        } else if (mb_strlen($text) > 50 && mb_strlen($text) <= 55) {
            $fontSize = 20 * 2;
        } else if (mb_strlen($text) > 40 && mb_strlen($text) <= 50) {
            $fontSize = 22 * 2;
        } else if (mb_strlen($text) > 30 && mb_strlen($text) <= 40) {
            $fontSize = 26 * 2;
        } else if (mb_strlen($text) > 27 && mb_strlen($text) <= 30) {
            $fontSize = 36 * 2;
        } else if (mb_strlen($text) > 25 && mb_strlen($text) <= 27) {
            $fontSize = 40 * 2;
        } else if (mb_strlen($text) > 20 && mb_strlen($text) <= 25) {
            $fontSize = 42 * 2;
        } else if (mb_strlen($text) > 15 && mb_strlen($text) <= 20) {
            $fontSize = 52 * 2;
        } else if (mb_strlen($text) > 13 && mb_strlen($text) <= 15) {
            $fontSize = 64 * 2;
        } else if (mb_strlen($text) > 10 && mb_strlen($text) <= 13) {
            $fontSize = 68 * 2;
        } else {
            $fontSize = 96 * 2;
        }

        $picture->text($text, 500, 750, function($font) use ($fontSize) {
            $font->file(public_path('/fonts/Ubuntu-Medium.ttf'));
            $font->size($fontSize);
            $font->color('#002868'); // $fw-blue
            $font->align('center');
            $font->valign('middle');
            $font->angle(45); // direction: â†—
        });

        $picture->encode('jpg', $quality);

        return $picture;
    }

    public static function makeProfileCover(UploadedFile $file, $quality = 90)
    {
        return self::makeAvatar($file, $quality);
    }

    public static function makeFollowoutPicture(UploadedFile $file, $quality = 90)
    {
        return self::makeAvatar($file, $quality);
    }

    public static function makeCouponFlyer(UploadedFile $file, $quality = 90)
    {
        $extension = $file->guessExtension();

        if ($extension === 'png') {
            $encoding = 'png';
        } elseif ($extension === 'jpg' || $extension === 'jpeg') {
            $encoding = 'jpg';
        } else {
            throw new \Exception($extension.' format is not supported yet.', 422);
        }

        $bg = Image::canvas(1000, 1500, '#eeeeee');

        $picture = Image::make($file);

        $picture->resize(800, null, function ($constraint) {
            $constraint->aspectRatio();
        });

        $bg->insert($picture, 'center');

        $bg->encode($encoding, $quality);

        return $bg;
    }

    public static function makeRewardProgramPicture(UploadedFile $file, $quality = 90)
    {
        return self::makeAvatar($file, $quality);
    }

    public static function makeCouponQRCode(UploadedFile $file, $quality = 90)
    {
        return self::makeCouponFlyer($file, $quality);
    }

    public function getPathAttribute()
    {
        if ($this->isVideo()) {
            return $this->video->path_thumb;
        }

        return $this->attributes['path'] ?? null;
    }
}
